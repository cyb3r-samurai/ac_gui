#pragma once

#include <QVector3D>
#include <QVector>
#include "matrix.h"
#include <complex>

/**
 * Устанавливает ориентацию системы координат антенной решетки
 * относительно нормальной топоцентрической системы координат.
 *
 * Начальное положение решетки:
 * - Лежит горизонтально, антенными элементами вверх.
 * - Нижняя часть решетки смотрит на север.
 * - Верхняя часть — на юг.
 *
 * Иллюстрация расположения элементов решетки и осей:
 *
 *   X <----------------------
 *     | а240 а224 . а16 а0  |
 *     | а241 а225 . а17 а1  |               N
 *     |           .         |               ^
 *     | ....................|               |
 *     |           .         |          W----|----> O (центр)
 *     | а254 а238 . а30 а14 |               |
 *     | а255 а239 . а31 а15 |               S
 *     ----------------------|
 *                          Y
 *
 * Нормальная топоцентрическая СК:
 * - Ось X — направлена на север
 * - Ось Y — направлена на восток
 * - Ось Z — вертикально вверх
 */

/// Класс моделирования антенной решетки.
/// Предоставляет средства задания конфигурации решетки, её ориентации, а также расчета амплитудно-фазового распределения (АФР).
class AntModel
{
public:
    AntModel();

    /// Устанавливает направление нормали антенной решетки относительно нормальной топоцентрической системы координат (СК).
    /// @param az Азимут (в радианах)
    /// @param el Угол места (в радианах)
    /// @param rot Вращение решетки вокруг нормали (в радианах)
    bool setDirection(double az, double el, double rot = 0);

    /// Устанавливает параметры решетки и формирует её структуру.
    /// @param cntX Количество элементов по X
    /// @param cntY Количество элементов по Y
    /// @param stepX Шаг между элементами по X (в метрах)
    /// @param stepY Шаг между элементами по Y (в метрах)
    /// @param shiftY Смещение Y для чередующихся строк (в метрах)
    bool setGrid(
        int cntX, int cntY, double stepX = 0.105, double stepY = 0.105, double shiftY = 0.105 / 2);

    /// Выполняет расчет амплитудно-фазового распределения (АФР) на заданное направление.
    /// @param az Азимут направления луча (в радианах)
    /// @param el Угол места направления луча (в радианах)
    /// @param centralFreq Центральная частота в Гц
    bool calcDist(double az, double el, double centralFreq = 1.5445e9);

    /// Возвращает вектор координат элементов антенной решетки.
    QVector<QVector3D> getGrid() const;

    /// Возвращает вектор комплексных коэффициентов АФР.
    QVector<std::complex<double>> getDist() const;

private:
    TMatrix<std::complex<double>> dist;  ///< Матрица амплитудно-фазового распределения
    TMatrix<double> Mt;                  ///< Матрица ориентации (матрица поворота)
    TMatrix<double> grid;                ///< Координаты решетки
    double sizeX = 0;                    ///< Размер по оси X
    double sizeY = 0;                    ///< Размер по оси Y
};
